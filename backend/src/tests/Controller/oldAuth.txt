import { describe, expect } from '@jest/globals';
import httpMocks from 'node-mocks-http';
import { Response } from 'express';
// import User from '../../../models/user.model';
import { request, mockRequest, mockResponse } from '../helpers';
import * as authUser from '../../api/controllers/auth.controllers';
import { sequelizeMock } from 'sequelize-mock';

// jest.mock('../../../api/controllers/auth.controllers');

// jest.mock('../../../models/user.model', () => {
//     User: jest.fn();
// });

// const mockFindUser = jest.spyOn(User, 'findOne');

// const mockUserSignin = jest.spyOn(User, 'findOne');

const outFindUser = {
    id: 1,
    email: 'bao01@gmail.com',
    userName: 'bao',
    dateOfBirth: '2023-08-03T09:14:24.139Z',
    phoneNumber: '0355736772',
    avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
};

const newOutFindUser = {
    dataValues: {
        id: 1,
        email: 'bao01@gmail.com',
        password: '$2a$08$KV6AFjAPUHsFkkaljWv4Fub8Cf8zyTx9MiqZ1lYXAqcjUPIFtm4Qu',
        userName: 'I Show Speed',
        dateOfBirth: '2023-08-17T08:56:06.722Z',
        phoneNumber: '0392747972',
        secretAsk: 'What is your mother name',
        secretAns: 'Speed father',
        avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
        device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
        createdAt: '2023-08-17T09:03:20.834Z',
        updatedAt: '2023-08-17T09:03:20.834Z',
    },
    _previousDataValues: {
        id: 1,
        email: 'bao01@gmail.com',
        password: '$2a$08$KV6AFjAPUHsFkkaljWv4Fub8Cf8zyTx9MiqZ1lYXAqcjUPIFtm4Qu',
        userName: 'I Show Speed',
        dateOfBirth: '2023-08-17T08:56:06.722Z',
        phoneNumber: '0392747972',
        secretAsk: 'What is your mother name',
        secretAns: 'Speed father',
        avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
        device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
        createdAt: '2023-08-17T09:03:20.834Z',
        updatedAt: '2023-08-17T09:03:20.834Z',
    },
    uniqno: 1,
    _options: {
        isNewRecord: false,
        _schema: null,
        _schemaDelimiter: '',
        raw: true,
        attributes: [
            'id',
            'email',
            'password',
            'userName',
            'dateOfBirth',
            'phoneNumber',
            'secretAsk',
            'secretAns',
            'avatar',
            'device',
            'createdAt',
            'updatedAt',
        ],
    },
    isNewRecord: false,
};

// const UserMock = dbMock.define('user', {
//     id: 1,
//     email: 'bao01@gmail.com',
//     userName: 'bao',
//     dateOfBirth: '2023-08-03T09:14:24.139Z',
//     phoneNumber: '0355736772',
//     avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
// });
// jest.mock('../../../models/user.model.ts', () => {
//     UserMock.$queryInterface.$useHandler((query, queryOptions) => {
//         if (query === 'findAndCountAll') {
//             return { count: 2, rows: [UserMock.build({ id: 1 }), UserMock.build({ id: 2 })] };
//         } else if (query === 'findOne') {
//             return UserMock.build({ id: queryOptions[0].where.id });
//         }
//     });
//     return UserMock;

//     // eslint-disable-next-line no-unused-labels
//     // findAll: jest.fn().mockReturnValueOnce({ outFindUser });
// });

// const dbTeardown = async () => {
//     await User.sync({ force: true });
// };
const inSignup = {
    email: 'bao01@gmail.com',
    password: 'Mn12345678',
    passwordConfirm: 'Mn12345678',
    userName: 'bao',
    dateOfBirth: '2023-08-03T09:14:24.139Z',
    phoneNumber: '0355736772',
    secretAsk: 'What is your mother name',
    secretAns: 'Speed father',
    avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
};

const inSignin = {
    email: 'bao05',
    password: 'Mn12345678',
    device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
};

const outSignup = {
    id: 1,
    email: 'bao01@gmail.com',
    userName: 'bao',
    dateOfBirth: '2023-08-03T09:14:24.139Z',
    phoneNumber: '0355736772',
    avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
    device: null,
};

const outSignin = {
    accessToken:
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjkzOTcxNDI0LCJleHAiOjE2OTM5NzIwMjR9.kTo9qzNO8BAP0BJJlzvVjquUC_kl-1pX10RyVYR28kw',
    refreshToken:
        'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjkzOTcxNDI0LCJleHAiOjE2OTQwNTc4MjR9.ToJwmFYFuV-vZ4hyFuweGvvVFSfWPGT_m-fSMuzs6k0',
    user: {
        id: 1,
        email: 'bao01@gmail.com',
        userName: 'bao',
        dateOfBirth: '2023-08-03T09:14:24.139Z',
        phoneNumber: '0355736772',
        avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
        device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
    },
};

describe('Auth routes', () => {
    // beforeEach(async () => {
    //     await dbTeardown();
    //     await request.post('/api/auth/signup').send(inSignup);
    // });

    // afterEach(async () => {
    //     await dbTeardown();
    // });

    describe('Test sever', () => {
        it('It should respond to the GET method', async () => {
            const res = await request.get('/');

            expect(res.statusCode).toBe(200);
        });
    });

    describe('Sign In', () => {
        it('should return signin user', async () => {
            // // const createSigninMock = jest
            // //     .spyOn(UserAuth, 'signin')
            // //     // @ts-ignore
            // //     .mockReturnValueOnce({ outSignin, isFetching: false });
            // // console.log(createSigninMock);
            // // const { body, statusCode } = await request.post(`/api/auth/signin`).send(inSignin);
            // // console.log(body);
            // // expect(statusCode).toBe(200);
            // // expect(createSigninMock).toHaveBeenCalledWith(inSignin);

            // // const req = mockRequest();

            // const req = httpMocks.createRequest();
            // const res = httpMocks.createResponse();

            // req.body = inSignin;

            // const mockUserSigninPayload = jest.fn(async (req, res) => {
            //     return res.status(203).send(outSignin);
            // });
            // mockUserSignin.mockImplementation(mockUserSigninPayload);

            // await authUser.signin(req, res);
            // expect(mockUserSignin).toHaveBeenCalledTimes(1);
            // expect(res.statusCode).toEqual(201);

            // // expect(res.send).toHaveBeenCalledTimes(1);
            // // expect(res.send.mock.calls.length).toBe(1);
            // // expect(res.send).toHaveBeenCalledWith(outSignin);

            // // expect(res.status).toHaveBeenCalledWith(200);
            // // expect(res.json).toHaveBeenCalledWith(outSignin);

            // // expect(res).toHaveBeenCalledWith(mockUserSigninPayload);

            // // expect(res.status).toHaveBeenCalledWith(200);

            // // expect(mockUserSignin).toHaveBeenCalledWith(outSignin);
            // // expect(res._getJSONData().email).toEqual('bao01@gmail.com');

            // // console.log(res._getJSONData().email);
            // // console.log(res.);

            // // expect(res.json).toHaveBeenCalledWith(expect.objectContaining({}));

            // // expect(createSigninMock).toHaveBeenCalledWith(inSignin);

            const dbMock = sequelizeMock;
            dbMock.define(
                'user',
                {
                    name: 'Test User',
                    email: 'test@example.com',
                    joined: new Date(),
                },
                // {
                //     instanceMethods: {
                //         tenure: function () {
                //             return Date.now() - this.get('joined');
                //         },
                //     },
                // },
            );
            dbMock.findOne.returns(newOutFindUser);

            const req = httpMocks.createRequest();
            const res = httpMocks.createResponse();

            //  const req = { body: inSignin };
            // const res = { status: jest.fn().mockReturnThis(), json: jest.fn() };

            req.body = inSignin;

            // const mockOutFindUser = jest.fn(async () => {
            //     return outFindUser;
            // });
            // mockFindUser.mockImplementation(newOutFindUser);

            await authUser.signin(req, res);
            // expect(mockUserSignin).toHaveBeenCalledTimes(1);
            expect(res.statusCode).toEqual(200);
            expect(res.json).toHaveBeenCalledWith(expect.objectContaining(outSignin));
        });
    });
});



// Write your test

// jest.mock('../../../models/user.model', () => {
//     // Get the real User model
//     const actualUser = jest.requireActual('../../../models/user.model');
//     // Create a mock user instance with some dummy data
//     const outFindOne = {
//         dataValues: {
//             id: 1,
//             email: 'bao01@gmail.com',
//             password: '$2a$08$Q6RWGmkge4n9yoo2L92aRuVZbT7frPEeJ1v6RU6yHPuWRVOKi4n7G',
//             userName: 'bao',
//             dateOfBirth: '2023-08-03T09:14:24.139Z',
//             phoneNumber: '0355736772',
//             secretAsk: 'What is your mother name',
//             secretAns: 'Speed father',
//             avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
//             device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
//             createdAt: '2023-09-11T06:44:00.031Z',
//             updatedAt: '2023-09-11T06:44:03.856Z',
//         },
//     };
//     // Mock the findOne method of the User model to return the mock user instance
//     actualUser.findOne = jest.fn().mockReturnValue(outFindOne);
//     // Return the modified User model
//     return actualUser;
// });

// jest.mock('../../../models/book.model', () => ({}));
// jest.mock('../../../models/index', () => ({}));
// jest.mock('../../../models/review.model', () => ({}));
// jest.mock('../../../models/hideReview.model', () => ({}));
// jest.mock('../../../models/likeBook.model', () => ({}));
// jest.mock('../../../models/likeReview.model', () => ({}));
// jest.mock('../../../models/notification.model', () => ({}));

// const outFindOne = {
//     dataValues: {
//         id: 1,
//         email: 'bao01@gmail.com',
//         password: '$2a$08$Q6RWGmkge4n9yoo2L92aRuVZbT7frPEeJ1v6RU6yHPuWRVOKi4n7G',
//         userName: 'bao',
//         dateOfBirth: '2023-08-03T09:14:24.139Z',
//         phoneNumber: '0355736772',
//         secretAsk: 'What is your mother name',
//         secretAns: 'Speed father',
//         avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
//         device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
//         createdAt: '2023-09-11T06:44:00.031Z',
//         updatedAt: '2023-09-11T06:44:03.856Z',
//     },
//     _previousDataValues: {
//         id: 1,
//         email: 'bao01@gmail.com',
//         password: '$2a$08$Q6RWGmkge4n9yoo2L92aRuVZbT7frPEeJ1v6RU6yHPuWRVOKi4n7G',
//         userName: 'bao',
//         dateOfBirth: '2023-08-03T09:14:24.139Z',
//         phoneNumber: '0355736772',
//         secretAsk: 'What is your mother name',
//         secretAns: 'Speed father',
//         avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
//         device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
//         createdAt: '2023-09-11T06:44:00.031Z',
//         updatedAt: '2023-09-11T06:44:03.856Z',
//     },
//     uniqno: 1,
//     _options: {
//         isNewRecord: false,
//         _schema: null,
//         _schemaDelimiter: '',
//         raw: true,
//         attributes: [
//             'id',
//             'email',
//             'password',
//             'userName',
//             'dateOfBirth',
//             'phoneNumber',
//             'secretAsk',
//             'secretAns',
//             'avatar',
//             'device',
//             'createdAt',
//             'updatedAt',
//         ],
//     },
//     isNewRecord: false,
// };

// expect(res.send).toHaveBeenCalledWith({
//     user: {
//         id: 1,
//         email: 'test@test.com',
//         password: undefined,
//         secretAsk: undefined,
//         secretAns: undefined,
//         createdAt: undefined,
//         updatedAt: undefined,
//     },
// });

// jest.mock('sequelize', () => {
//     // Create a mock user instance with some dummy data
//     const outFindOne = {
//         dataValues: {
//             id: 1,
//             email: 'bao01@gmail.com',
//             password: '$2a$08$Q6RWGmkge4n9yoo2L92aRuVZbT7frPEeJ1v6RU6yHPuWRVOKi4n7G',
//             userName: 'bao',
//             dateOfBirth: '2023-08-03T09:14:24.139Z',
//             phoneNumber: '0355736772',
//             secretAsk: 'What is your mother name',
//             secretAns: 'Speed father',
//             avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
//             device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
//             createdAt: '2023-09-11T06:44:00.031Z',
//             updatedAt: '2023-09-11T06:44:03.856Z',
//         },
//         _previousDataValues: {
//             id: 1,
//             email: 'bao01@gmail.com',
//             password: '$2a$08$Q6RWGmkge4n9yoo2L92aRuVZbT7frPEeJ1v6RU6yHPuWRVOKi4n7G',
//             userName: 'bao',
//             dateOfBirth: '2023-08-03T09:14:24.139Z',
//             phoneNumber: '0355736772',
//             secretAsk: 'What is your mother name',
//             secretAns: 'Speed father',
//             avatar: 'http://res.cloudinary.com/dcllp2b8r/image/upload/v1692263000/e6edgqmqitfyzgzuhgj5.png',
//             device: 'c_0CYPeLSWeToyVUkHUphF:APA91bGmYndFYfsidjDsfEZbLkpHQ1HVflqNQTRPS8-aiFklY2UB4h4RCCCy2sxBbxynpZyNlhjaWMsMHgx7ap_-L0PBWxo-WKgoOi0w7GwSuQrP8mYAwBZc8muhLBoxT_STMfA5RIot',
//             createdAt: '2023-09-11T06:44:00.031Z',
//             updatedAt: '2023-09-11T06:44:03.856Z',
//         },
//         uniqno: 1,
//         _options: {
//             isNewRecord: false,
//             _schema: null,
//             _schemaDelimiter: '',
//             raw: true,
//             attributes: [
//                 'id',
//                 'email',
//                 'password',
//                 'userName',
//                 'dateOfBirth',
//                 'phoneNumber',
//                 'secretAsk',
//                 'secretAns',
//                 'avatar',
//                 'device',
//                 'createdAt',
//                 'updatedAt',
//             ],
//         },
//         isNewRecord: false,
//     };
//     // Create a mock user model with a mock implementation of the findOne method
//     const mUserModel = {
//         findOne: jest.fn().mockResolvedValue(outFindOne),
//     };
//     // Return a mock Sequelize constructor that returns the mock user model
//     return {
//         Sequelize: jest.fn(() => mUserModel),
//     };
// });


// const mockCreateToken = jest.fn();
// const mockCreateRefreshToken = jest.fn();
// jest.mock('../../helpers/jwt', () => {
//     return {
//         createToken: mockCreateToken,
//         createRefreshToken: mockCreateRefreshToken,
//     };
// });
//  jest.mock('../../helpers/jwt', () => {
//      createToken: jest.fn().mockReturnValueOnce(
//          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjk0NzY0MjMzLCJleHAiOjguNjRlKzMxfQ.N8V4Rl-67ErBu_QXh7ADl4QCQr43qcOvkgN3t80_qeY',
//      );
//      createRefreshToken: jest.fn().mockReturnValueOnce(
//          'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiaWF0IjoxNjk0NzY0MjMzLCJleHAiOjguNjRlKzMxfQ.T1Cqq7t_M7sSc_7D3DUsDR1xANYdZVZJDdhq3NNA2Hw',
//      );
//  });


// You need to mock the Sequelize module because you want to isolate your controller module from its dependencies and avoid making actual database calls in your unit test. Mocking the module allows you to intercept any function calls from that module and provide your own implementation or return value. For example, by mocking the `transaction` function, you can avoid creating a real transaction in your database and just return a resolved promise instead.

// Mocking the module also gives you access to the mock functions that Jest creates for each exported function from that module. You can use these mock functions to check how many times they were called, what arguments they received, what they returned, etc. For example, you can use `sequelize.transaction.mockImplementation()` to customize the behavior of the mocked `transaction` function, or use `expect(sequelize.transaction).toBeCalled()` to verify that it was called in your test.

// You can find more information about mocking modules in Jest in these links:

// - [Bypassing module mocks · Jest](https://jestjs.io/docs/bypassing-module-mocks) ¹
// - [Quickest and Simplest Way of Mocking Module Dependencies With Jest - STRV](https://www.strv.com/blog/quickest-simplest-way-mocking-module-dependencies-jest-engineering) ²
// - [ES6 Class Mocks · Jest](https://jestjs.io/docs/es6-class-mocks) ³
// - [Manual Mocks · Jest](https://jestjs.io/docs/manual-mocks) ⁴
// - [Module Mocking in Jest. Exports and module factories and mock… | by ...](https://codeburst.io/module-mocking-in-jest-ff174397e5ff) ⁵
// - [Mock Functions · Jest](https://jestjs.io/docs/mock-functions) ⁶

// Does this answer your question?

// Source: Conversation with Bing, 9/10/2023
// (1) Bypassing module mocks · Jest. https://jestjs.io/docs/bypassing-module-mocks.
// (2) Quickest and Simplest Way of Mocking Module Dependencies With Jest - STRV. https://www.strv.com/blog/quickest-simplest-way-mocking-module-dependencies-jest-engineering.
// (3) ES6 Class Mocks · Jest. https://jestjs.io/docs/es6-class-mocks.
// (4) Manual Mocks · Jest. https://jestjs.io/docs/manual-mocks.
// (5) Module Mocking in Jest. Exports and module factories and mock… | by .... https://codeburst.io/module-mocking-in-jest-ff174397e5ff.
// (6) Mock Functions · Jest. https://jestjs.io/docs/mock-functions.

